/////////////////////////////////////////////
/////////////       HEADER       ////////////
/////////////////////////////////////////////
// LOGO
.logo {
    height: 3.25rem;
    margin: 2rem; // applying a margin to the left side of logo without using flexbox properties
}


/////////////////////////////////////////////
// SEARCH
.search {
    flex: 0 0 40%; // searchbar will occupy 40% of header space without shrinking/growing

    // aligns searchbox to center so that when the searchbox is active, it stretches to 100% evenly on both side instead of stretching towards one side
    display: flex; // aligns searchbox with search icon
    align-items: center; // aligns along y-axis (cross-axis)
    justify-content: center; // aligns along x-axis (main-axis)

    &__input {
        font-family: inherit; // input doesn't automatically inherit font-family of the global document, so we must restate that here
        font-size: inherit;
        color: inherit;
        background-color: var(--color-grey-light-2);
        border: none;
        padding: .7rem 2rem;
        border-radius: 100px; // gives rounded edges to search input box -- number can be any high number
        width: 90%; // not using 100% bc we'll be making this searchbox have an animation which expands it from 90% to 100% when user clicks it
        transition: all .2s; // smoothes the animation stretch from 90% to 100% by .2s
        margin-right: -3.25rem; // removes margin "gap" between input box and search icon to allow the search icon to be on top of searchbox

        &:focus { // focused = when it is clicked on (not hovered)
            outline: none; // removes blue outline when input box is focused
            width: 100%; // searchbox stretches to 100% when focused
            background-color: var(--color-grey-light-3); // searchbox turns darker when focused
        }

        // PLACEHOLDER TEXT - changes the font-weight & color 
        &::-webkit-input-placeholder {
            font-weight: 100;
            color: var(--color-grey-light-4); 
        }
    }

    // selects ONLY the button that is adjacent to the search__input element -- in this case, the search icon button is selected and set to have the same bg color as search__input
    &__input:focus + &__button {
        background-color: var(--color-grey-light-3); // same bg-color as search__input:focus {}
    }

    &__button {
        border: none;
        background-color: var(--color-grey-light-2); // same color as the input searchbox to look like it's on top of it

        &:focus {
            outline: none;
        }

        &:active {
            transform: translateY(2px); // search icon moves down 2px when clicked
        }
    }

    &__icon {
        height: 2rem;
        width: 2rem;
        fill: var(--color-grey-dark-3); // changes ICON COLOR 
    }
}


/////////////////////////////////////////////
// USER NAVIGATION
.user-nav {
    align-self: stretch; // overrides the align-items: center in the header in order to fill the y-axis height
    display: flex;
    align-items: center;
    
    // selects all children of .user-nav
    & > * {
        padding: 0 2rem; // adds padding to the icon box
        cursor: pointer;
        height: 100%; // allows for the height of changes to :hover to fill the entire height -- in this case, the hover bg color; but now the icon-box is aligned to the top

        // aligns items in the icon-box to the center -- this is a fix for the height: 100% property
        display: flex;
        align-items: center;
    }

    // selects all children of .user-nav when hovered
    & > *:hover {
        background-color: var(--color-grey-light-2);
    }

    &__icon-box {
        position: relative; // parent of __notification -- used for absolute position
    }

    &__icon {
        height: 2.25rem;
        width: 2.25rem;
        fill: var(--color-grey-dark-2);
    }

    &__notification {
        font-size: .8rem;
        height: 1.75rem;
        width: 1.75rem;
        border-radius: 50%; 
        background-color: var(--color-primary);
        color: #fff;

        //flexbox can't position this notification number exactly where we want it, so we have to use absolute positioning
        position: absolute; // parent element is __icon-box
        top: 1.5rem;
        right: 1.1rem;

        //centers text numbers within the notification bubble
        display: flex;
        justify-content: center;
        align-items: center;
    }

    &__user-photo {
        height: 3.75rem;
        border-radius: 50%;
        margin-right: 1rem;
    }
}


/////////////////////////////////////////////
///////////////    CONTENT     //////////////
/////////////////////////////////////////////
// SIDEBAR NAVIGATION
.side-nav {
    font-size: 1.4rem;
    list-style: none;
    margin-top: 3.5rem;
    
    &__item {
        position: relative;

        // applies margin to all children of &__item except the last child
        &:not(:last-child) {
            margin-bottom: .5rem;
        }
    }

    // creates a line on the side of each button 
    &__item:before {
        content: ""; // content is always specified for :before pseudo element to work
        position: absolute; // parent element is &__item
        top: 0;
        left: 0;
        height: 100%;
        width: 3px;
        background-color: var(--color-primary);
        transform: scaleY(0); // initial state of the line
        // transform-origin: bottom; // this will start scaling at the bottom
        transition: transform .2s,
                    width .4s cubic-bezier(1, 0, 0, 1) .2s, // width stretches over .4s and starts after a .2s delay (which is after the transform animation happens)
                    background-color .1s; // animates bg-color in .1s
    }
    // when hovered, this effect takes place BEFORE the hover effect -- so when you hover, short line on side appears then the hover style takes effect
    &__item:hover::before,
    &__item--active::before { // apply this to the --active modifier with this ::before css
        transform: scaleY(1); // makes the line grow from the center and towards the top and bottom (aka the Y-direction)

        width: 100%; // stretches the "line" width to 100%
    }

    &__item:active::before {
        background-color: var(--color-primary-light); // animation: changes item bg color when clicked on
    }

    // :link styles the anchor links that hasn't been visited && :visited styles anchor links that has been visited
    &__link:link,
    &__link:visited {
        color: var(--color-grey-light-1);
        text-decoration: none;
        text-transform: uppercase;
        display: block;
        padding: 1.5rem 3rem;
        
        // sets links to be in front of the animations; z-index doesns't work unless we specify the position of the element
        position: relative;
        z-index: 10;

        display: flex;
        align-items: center; // centers icons and text vertically
        
    }

    &__icon {
        width: 1.75rem;
        height: 1.75rem;
        margin-right: 2rem;
        fill: currentColor; // currentColor uses the current color of the current element OR the parent element which is &__link
    }
}


/////////////////////////////////////////////
// LEGAL TEXT
.legal {
    font-size: 1.2rem;
    color: var(--color-grey-light-4);
    text-align: center;
    padding: 2.5rem;
}


/////////////////////////////////////////////
// GALLERY
.gallery {
    display: flex;

    &__photo {
        width: 100%; // in responsive design, we always want flexible images so we always have to define a width or a height in percentages
        display: block; // avoids having small space underneath an image when we leave it as an inline element; so this should always be a block or an inline-block 
    }
}


/////////////////////////////////////////////
// HOTEL OVERVIEW
.overview {
    display: flex; // aligns overview bar content into a row
    align-items: center;
    border-bottom: var(--line);

    
    &__heading {
        font-size: 2.25rem;
        font-weight: 300;
        text-transform: uppercase;
        letter-spacing: 1px;
        padding: 1.5rem 3rem; // adds padding between the sidebar and star icons
    }

    &__stars {
        // IDEAL METHOD/TRICK OF CREATING SPACE BETWEEN -- POWERFUL TOOL TO CREATE "SPACE BETWEEN" TWO ELEMENTS WITHOUT EXPANDING ONE OF THEIR WIDTHS OR OCCUPYING THE ENTIRE ROW/SPACE
        margin-right: auto; // could also use margin-left: auto; for &__location{}
        
        display: flex; // aligns the stars within the element -- removes the space at the bottom of each star bc svg elements are considered text, therefore they get some spacing at the bottom like texts

        // NOT IDEAL METHOD OF CREATING SPACE BETWEEN
        // Creates the gap between star icons and the location icon -- NOT IDEAL TO USE THIS AS IT MAKES THE STAR ICONS STRETCH THEIR WIDTH
        // background-color: orangered; // test to see the growth of stars
        // flex: 1; // stars grow and take up the rest of the space from here to icon-star/location -- thus, creating the gap in between since justify-content: space-between won't allow it for only two of the four elements
    }

    &__icon-star,
    &__icon-location {
        //icon size continuity and these icons should be red/color-primary
        width: 1.75rem; 
        height: 1.75rem;
        fill: var(--color-primary);
    }

    &__location {
        font-size: 1.2rem;
        display: flex;
        align-items: center;
    }

    &__icon-location {
        margin-right: .5rem; // creates margin between location icon & inline button
    }

    &__rating {
        background-color: var(--color-primary);
        color: #fff;
        margin-left: 3rem;
        padding: 0 2.25rem;
        align-self: stretch; // overrides .overview { align-items: center; } and gives this __rating box its full height

        // puts average & count in a column, aligned to the center
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    &__rating-average {
        font-size: 2.25rem;
        font-weight: 300;
        margin-bottom: -3px; // decreases space between rating average & count
    }

    &__rating-count {
        font-size: .8rem;
        text-transform: uppercase;
    }
}


/////////////////////////////////////////////
// BUTTON INLINE - this element is independent of .overview because it will be used again later
.btn-inline {
    border: none; // we never want the border
    color: var(--color-primary);
    font-size: inherit; // since we're using this element in multiple parent elements, we'll be having different font sizes for each of those, thus we can state here for this inline button to inherit that parent element's font-size
    border-bottom: 1px solid currentColor; // current color w/o hover: var(--color-primary) && currentcolor w/ hover var(--color-grey-dark-1)
    padding-bottom: 2px;
    display: inline-block;
    background-color: transparent; // we're reussing this button on different parent elements that will have different background colors, so we do not want to attribute a different color everytime here--therefore making it transparent
    cursor: pointer;
    transition: all .2s;

    & span {
        margin-left: 3px;
        transition: margin-left .2s;
    }

    &:hover {
        color: var(--color-grey-dark-1); // changes color of TEXT && BORDER when hovered; this is due to "currentColor" property for border

        span {
            margin-left: 8px;
        }
    }

    &:focus { // when clicked
        outline: none; // never want the default blue border

        // infinite animation -- @keyframes pulsate
        animation: pulsate 1s infinite;
    }
}


// Pulsating infinite animation -- used as 'animation: pulsate 1s infinite;' in .btn-inline:focus {}
@keyframes pulsate {
    // initial state
    0% {
        transform: scale(1);
        box-shadow: none;
    }

    // middle state - it scales up
    50% {
        transform: scale(1.05);
        box-shadow: 0 1rem 4rem rgba(0,0,0,.25);
    }
    
    // end state - it scales back down to initial state
    100% {
        transform: scale(1);
        box-shadow: none;
    }
}


/////////////////////////////////////////////
// PARAGRAPH
.paragraph:not(:last-of-type) {
    margin-bottom: 2rem; // theres two paragraphs and we want a margin between those two. so we select the first paragraph by using :not(:last-of-type); :not(:last-child) would not work because this is not the last child of the description container
}


/////////////////////////////////////////////
// LIST
.list {
    list-style: none;

    // space outside of the list container (at the top and bottom)
    margin: 3rem 0;

    // space between the border lines and the list items -- (space inside)
    padding: 3rem 0;
    
    // adds border lines at the top and bottom
    border-top: var(--line);
    border-bottom: var(--line);

    display: flex;
    flex-wrap: wrap;

    &__item {
        flex: 0 0 50%; // we use this instead of width. and we use 50% because if we want 2 items side by side then that means 100% / 2 = 50%
        margin-bottom: .7rem;
    }

    // Adding SVG Icon to List Item using CSS && ::before pseudo element
    &__item::before {
        content: ""; // always specify content property when using pseudo elements
        display: inline-block; // keeps the icon inline with the item text
        height: 1rem; // height of the icon
        width: 1rem; // width of the icon
        margin-right: .7rem; // margin to the right of icon
        
        /////////////////////////////////////////////
        /// ADDING THE ICON - 2 DIFFERENT METHODS ///
        /////////////////////////////////////////////

        // METHOD 1 - OLDER BROWSERS - BG-IMG -- you can't change the icon color using this method -- if you are okay with that then use this method
        // background-image: url(../img/chevron-thin-right.svg); // we go up one level bc we technically start from css/style.css
        // background-size: cover;


        // METHOD 2 - NEWER BROWSERS - MASKS - 1) bg-color = solid color && 2) icon will be the mask -- peripheral: you're looking thru the icon-shape to see the bg color
        background-color: var(--color-primary); // icon color
        -webkit-mask-image: url(../img/chevron-thin-right.svg); // icon shape
        -webkit-mask-size: cover; // we use mask size instead of background-size 
        mask-image: url(../img/chevron-thin-right.svg);
        mask-size: cover;
    }
}


/////////////////////////////////////////////
// RECOMMEND
.recommend {
    font-size: 1.3rem;
    color: var(--color-grey-dark-3);

    display: flex;
    align-items: center;

    &__count {
        margin-right: auto;
    }

    &__friends {

    }

    &__photo {
        box-sizing: content-box; // we use content-box (is the default for new projects) here because we don't want border-box (what we set all elements to in this project)
                                 // border-box includes the padding & the border into the width and the height of the element
                                 // content-box adds the border ON TOP of our current height and our width
        height: 4rem; // scales image down
        width: 4rem;
        border-radius: 50%; // rounds the image
        border: 3px solid #fff; // white border around each image that gives the effect of "overlap" aka it basically makes the part of the image that is overlapped transparent; 
                                  // problem: it covers the image with a 3px border, thus shrinking our image by 3px
                                  // solution 1 - automatically fixes it: box-sizing: content-box;
                                  // solution 2 - manually add it to height/width: height: 4.3rem; width: 4.3rem;

        &:not(:last-child) {
            margin-right: -1.5rem; // moves all images except the last towards the right -- allowing overlap
        }
    }
}


/////////////////////////////////////////////
// REVIEWS
.review {
    background-color: #fff;
    box-shadow: var(--shadow-light);
    padding: 3rem;
    margin-bottom: 3.5rem;
    position: relative;
    overflow: hidden; // fixes the problem where the quote would extend out of the review container
    

    &__text {
        margin-bottom: 2rem;
        z-index: 10; // only works with a position
        position: relative;
    }

    &__user {
        display: flex;
        align-items: center;
    }

    &__photo {
        height: 4.5rem;
        width: 4.5rem;
        border-radius: 50%;
        margin-right: 1.5rem;
    }

    &__user-box {
        margin-right: auto;
    }

    &__user-name {
        font-size: 1.1rem;
        font-weight: 600;
        text-transform: uppercase;
        margin-bottom: .4rem;
    }

    &__user-date {
        font-size: 1rem;
        font-weight: 300;
        color: var(--color-grey-dark-3);
    }

    &__rating {
        font-size: 2.2rem;
        font-weight: 300;
        color: var(--color-primary);
    }

    // adding quote icon - html entities https://css-tricks.com/snippets/html/glyphs/ - we must use the CSS version that uses "ISOnum" instead of &####
    &::before {
        content: "\201C";
        position: absolute;
        top: -2.75rem;
        left: -1rem;
        line-height: 1; // image was too big so we had to lower its line-height
        font-size: 20rem;
        color: var(--color-grey-light-2);
        font-family: sans-serif; // its currently inheriting open sans which doesnt look too good, so we're using sans-serif
        z-index: 1; // shows it behind the texts
    }
}